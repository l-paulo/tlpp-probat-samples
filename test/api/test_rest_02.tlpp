#include "tlpp-core.th"
#include "tlpp-probat.th"

namespace   test.api

using namespace tlpp.probat

@TestFixture()
function testRest02_A()

  local aUrls         := urlsRestExecTest()
  local cEndPoint     := '/test/sample'
  local cMethod       := 'GET'
  local cGETParms     := ''
  local cBodyOut      := ''
  local nTimeOut      := 5
  local aHeadOut      := {}
  local cHeadRet      := ''
  local aService      := {}
  local nIndex        := 0
  local xExpected

  // Mode 1 (automatic assert)
  // --------------------------
    xExpected := '{"response":"ok"}'
    tlpp.rest.runRestMultiProtocol(;
                                    cEndPoint           ,;
                                    cMethod             ,;
                                    cGETParms           ,;
                                    cBodyOut            ,;
                                    nTimeOut            ,;
                                    aHeadOut            ,;
                                    @cHeadRet           ,;
                                    xExpected           ,;
                                    'assertEquals'      ,;  // Inform which "assert" function will be automatically used internally by runRestMultiProtocol()
                                    'automatic assert'  ,;
                                    aUrls               ;
                                  )

  // Mode 2 (assert in test source)
  // ---------------------------------
    aService := tlpp.rest.runRestMultiProtocol(           ;
                                                cEndPoint ,;
                                                cMethod   ,;
                                                cGETParms ,;
                                                cBodyOut  ,;
                                                nTimeOut  ,;
                                                aHeadOut  ,;
                                                @cHeadRet ,;
                                                ""        ,;
                                                Nil       ,;
                                                ""        ,;
                                                aUrls     ,;
                                                .F.       ; // Indicates not to execute the asserts internally
                                              )

    if ( len(aService) > 0 )

      for nIndex := 1 to len( aService )

        xExpected := "HTTP.([\w:\/.]+)([200 OK]+)"
        assertIsRegexPartial( aService[nIndex][3], xExpected, 'manual assert' )

        xExpected := '{"response":"ok"}'
        assertEquals( aService[nIndex][2], xExpected, 'manual assert' )

      next

    else
      assertError( "could not run the REST service" )
    endif

return .T.
