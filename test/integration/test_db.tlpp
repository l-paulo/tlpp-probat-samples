#include 'tlpp-core.th'
#include 'tlpp-probat.th'

namespace  test.integration

using namespace tlpp.probat

#define   _id_      '00001'
#define   _descr_   'Carga inicial            '

@TestFixture( suite="bd" )
class test_db

  private data nConn      as numeric
  private data lConn      as logical
  private data cTable     as character
  private data lOpen      as logical
  private data cAlias     as character

  public method new()     constructor

  // Setups
    @OneTimeSetUp()
    public method setConn()

    @Setup()
    public method setTable()

  // Tests
    @Test('test method for DB update')
    public method test01_update()

    @Test('test method for DB insert')
    public method test02_insert()

  // TearDowns
    @TearDown()
    public method clearTable()

    @OneTimeTearDown()
    public method closeConn()

endclass


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method new() class test_db
  ::nConn   := -1
  ::lConn   := .F.
  ::cTable  := 'TBL'
  ::lOpen   := .F.
  ::cAlias  := 'TBL_A'
return self


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method setConn() class test_db
  local cEnv  as character
  local cIni  as character
  local cDB   as character
  local cSrv  as character
  local cDsn  as character
  local nPort as numeric

  cEnv  := GetEnvServer()
  cIni  := GetSrvIniName()
    cDB   :=      GetPvProfString( cEnv, 'DBDATABASE', '', cIni )
    cDsn  :=      GetPvProfString( cEnv, 'DBALIAS'   , '', cIni )
    cSrv  :=      GetPvProfString( cEnv, 'DBSERVER'  , '', cIni )
    nPort := val( GetPvProfString( cEnv, 'DBPORT'    , '', cIni ) )

  ::lConn :=  ( (::nConn := TcLink( cDB+'/'+cDsn, cSrv, nPort)) >= 0 )

    assertGreaterOrEqual( 0 , ::nConn, cDB+'/'+cDsn+'|'+cSrv+':'+cValtoChar(nPort) )
    assertTrue( ::lConn, 'TcLink' )
return .T.


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method closeConn() class test_db

  local lUnLink := .F. as logical
  local lDel    := .F. as logical
  
  if ( ::lConn )

    dbSelectArea( ::cAlias )

    if ( TCCanOpen(::cTable) )
      dbCloseArea()
      lDel := TCDelFile(::cTable)
        assertTrue( lDel, 'TCDelFile' )
    endif

    lUnLink := TCUNLink( ::nConn )
      assertTrue( lUnLink, 'TcUnLink' )
  else
    assertError( 'Invalid connection!' )
  endif
return .T.


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method setTable() class test_db

  local aDbTbl  :=  {}  as array
  local lCreate := .F.  as logical

  if ( !TCCanOpen(::cTable) )
    aDbTbl := {                         ;
                { 'ID'   , 'C',  5, 0 } ,;
                { 'DESCR', 'C', 25, 0 }  ;
              }
    dbCreate( ::cTable, aDbTbl, 'TOPCONN' )
  endif

  lCreate := TCCanOpen(::cTable)

  if ( assertTrue( lCreate, 'dbCreate' ) )

    if ( !::lOpen )
      dbUseArea( .T., 'TOPCONN', ::cTable, ::cAlias, .T., .F. )
      ::lOpen := .T.
    endif

    // Carga inicial do BD
    // -------------------
      dbSelectArea( ::cAlias )
      dbAppend( .T. )
        ( ::cAlias )->ID		  := _id_
        ( ::cAlias )->DESCR		:= _descr_
      dbCommit()
      dbRUnLock( Recno() )
  endif
return .T.


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method clearTable() class test_db

  local cQry    := ''   as character

  TCCommit(1)
    dbSelectArea( ::cAlias )

    cQry := 'DELETE FROM ' + ::cTable
    TcSqlExec(cQry)

    TCCommit(2)
  TCCommit(4)

return .T.


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method test01_update() class test_db

  local cAlias    := "TEMP"
  local cQry      := ''
  local cNewID    := '00099'
  local cNewDescr := 'NEW DESCR                '

  // Realiza Update do registro
    dbSelectArea( ::cAlias )
    dbRLock( Recno() )
      ( ::cAlias )->ID	  := cNewID
      ( ::cAlias )->DESCR	:= cNewDescr
      dbCommit()
    dbRUnLock( Recno() )

  // Verifica quais dados estao na tabela
    cQry := 'SELECT * FROM ' + ::cTable
    dbUseArea(.T., "TOPCONN", TCGenQry(NIL,NIL,cQry), (cAlias) , .F., .T. )

      assertEquals( (cAlias)->ID   , cNewID    )
      assertEquals( (cAlias)->DESCR, cNewDescr )

    (cAlias)->( dbCloseArea() )

return .T.


/* --------------------------------------------------------- */
/* --------------------------------------------------------- */
method test02_insert() class test_db

  local cAlias    := "TEMP"
  local cQry      := ''
  local cSecID    := '00002'
  local cSecDescr := 'Carga adicional teste    '
  local nControl  := 0

  // Adiciona registro no BD
  // -----------------------
    dbSelectArea( ::cAlias )
    dbAppend( .T. )
      ( ::cAlias )->ID		  := cSecID
      ( ::cAlias )->DESCR		:= cSecDescr
    dbCommit()
    dbRUnLock( Recno() )

  // Verifica quais dados estao na tabela
  // ------------------------------------
    cQry := 'SELECT * FROM ' + ::cTable
    dbUseArea(.T., "TOPCONN", TCGenQry(NIL,NIL,cQry), (cAlias) , .F., .T. )
    
    while ( (cAlias)->( !eof() ) )
      nControl++
      do case
        case ( nControl == 1 )
          assertEquals( (cAlias)->ID   , _id_      )
          assertEquals( (cAlias)->DESCR, _descr_   )
        case ( nControl == 2 )
          assertEquals( (cAlias)->ID   , cSecID    )
          assertEquals( (cAlias)->DESCR, cSecDescr )
        otherwise
          assertError( 'invalid register' )
      endcase
      (cAlias)->( dbSkip() )
    enddo
return .T.
